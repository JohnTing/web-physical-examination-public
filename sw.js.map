{"mappings":"AAKAA,KAAKC,iBAAiB,WAAYC,IAAD,I","sources":["src/sw.ts"],"sourcesContent":["/// <reference lib=\"WebWorker\" />\r\n// export empty type because of tsc --isolatedModules flag\r\nexport type {};\r\ndeclare const self: ServiceWorkerGlobalScope;\r\n\r\nself.addEventListener('install', (e) => {\r\n    /*\r\n    e.waitUntil(\r\n      caches.open('mystore').then((cache) => cache.addAll([\r\n      ])),\r\n    );\r\n*/\r\n});\r\n\r\nself.addEventListener('fetch', (e) => {\r\n    /*\r\n    console.log(e.request.url);\r\n    e.respondWith(\r\n      caches.match(e.request).then((response) => response || fetch(e.request)),\r\n    );\r\n*/\r\n});\r\n\r\n/*\r\nconst cacheName = 'pePWA-v1';\r\n\r\nself.addEventListener('fetch', (e) => {\r\n  e.respondWith((async () => {\r\n    const r = await caches.match(e.request);\r\n    console.log(`[Service Worker] Fetching resource: ${e.request.url}`);\r\n    if (r) { return r; }\r\n    const response = await fetch(e.request);\r\n    const cache = await caches.open(cacheName);\r\n    console.log(`[Service Worker] Caching new resource: ${e.request.url}`);\r\n    cache.put(e.request, response.clone());\r\n    return response;\r\n  })());\r\n});\r\n\r\n*/"],"names":["self","addEventListener","e"],"version":3,"file":"sw.js.map"}